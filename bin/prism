#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'commander/import'
require 'colored'

require_relative File.join('..', 'lib', 'prism.rb')

# :name is optional, otherwise uses the basename of this executable
program :name, 'Crash Prism'
program :version, Prism::VERSION
program :description, 'Symbol resolver for BinaryAge crash reports.'

# read ENV if present
Prism.config[:workspace] = ENV['CRASH_PRISM_WORKSPACE'] if ENV['CRASH_PRISM_WORKSPACE']
Prism.config[:product] = ENV['CRASH_PRISM_PRODUCT'] if ENV['CRASH_PRISM_PRODUCT']
Prism.config[:repo] = ENV['CRASH_PRISM_REPO'] if ENV['CRASH_PRISM_REPO']
Prism.config[:verbose] = true if ENV['CRASH_PRISM_VERBOSE']

global_option('-w', '--workspace PATH', 'Override workspace directory (for caches)') {|workspace| Prism.config[:workspace] = workspace}
global_option('-p', '--product PRODUCT', 'Product name to fetch correct archive') {|product| Prism.config[:product] = product}
global_option('-r', '--repo REPO', 'Repo URL from which to checkout archives') {|repo| Prism.config[:repo] = repo}
global_option('', '--verbose', 'Be verbose') {Prism.config[:verbose] = true}

command :show do |c|
  c.syntax = 'prism show GIST-ID'
  c.description = 'Download crash report and symbolize it on stdout'
  c.action do |args, _|
    sha = args[0]
    res = Prism.symbolize_crash_report_from_sha(sha)
    Prism.die "unable to fetch gist id=#{sha}" unless res
    puts res
  end
end

command :get do |c|
  c.syntax = 'prism get GIST-ID'
  c.description = 'Download crash report and print it on stdout'
  c.action do |args, _|
    sha = args[0]
    res = Prism::get_crash_report(sha)
    Prism.die "unable to fetch gist id=#{sha}" unless res
    puts res
  end
end

command :sym do |c|
  c.syntax = 'prism sym FILE'
  c.description = 'Symbolize crash report from file on stdout'
  c.action do |args, _|
    file = args[0]
    Prism.die "unable to read: #{file}" unless File.exists? file
    crash_report = File.read file
    puts Prism.symbolize_crash_report(crash_report)
  end
end

command :clear do |c|
  c.syntax = 'prism clear'
  c.description = 'Clear prism working directory'
  c.action do |_, _|
    Prism::clear_caches()
    puts "done (in #{Prism.config[:workspace].blue})"
  end
end

command :warm do |c|
  c.syntax = 'prism warm'
  c.description = 'Warm prism archive repo (speed up lookups in future)'
  c.action do |_, _|
    Prism::update_archive()
    puts "done (in #{Prism.work_dir.blue})"
  end
end

command :config do |c|
  c.syntax = 'prism config'
  c.description = 'Print prism config'
  c.action do |_, _|
    puts Prism.config
  end
end
