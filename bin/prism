#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'commander/import'

LIB_DIR = File.expand_path(File.join(File.dirname(__FILE__), '../lib'))
require File.join(LIB_DIR, 'prism.rb')

# :name is optional, otherwise uses the basename of this executable
program :name, 'Crash Prism'
program :version, Prism::VERSION
program :description, 'Symbol resolver for BinaryAge crash reports.'

global_option('-w', '--workspace PATH', 'Override workspace directory (for caches)') { |workspace| Prism.config[:workspace] = workspace }
global_option('-t', '--token GITHUB-TOKEN', 'GitHub token for accessing dwarfs archive repo') { |token| Prism.config[:token] = token }

command :show do |c|
  c.syntax = 'prism show GIST-ID'
  c.description = 'Download crash report and symbolize it on stdout'
  c.action do |args, options|
    puts Prism.symbolize_crash_report_from_sha(args[0])
  end
end

command :get do |c|
  c.syntax = 'prism get GIST-ID'
  c.description = 'Download crash report and print it on stdout'
  c.action do |args, options|
    res = Prism::get_crash_report(args[0])

    unless res
      puts "unable to fetch gist id=#{sha}"
      exit 1
    end

    puts res
  end
end

command :sym do |c|
  c.syntax = 'prism sym FILE'
  c.description = 'Symbolize crash report from file on stdout'
  c.action do |args, options|
    crash_report = File.read args[0]
    puts Prism.symbolize_crash_report(crash_report)
  end
end

command :clear do |c|
  c.syntax = 'prism clear'
  c.description = 'Clear prism working directory'
  c.action do |args, options|
    Prism::clear_caches()
  end
end